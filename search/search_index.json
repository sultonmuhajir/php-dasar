{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pendahuluan Pengertian PHP PHP adalah bahasa scripting server-side, Bahasa pemrograman yang digunakan untuk mengembangkan situs web statis atau situs web dinamis atau aplikasi Web. PHP singkatan dari Hypertext Pre-processor, yang sebelumnya disebut Personal Home Pages. Script sendiri merupakan sekumpulan instruksi pemrograman yang ditafsirkan pada saat runtime. Sedangkan Bahasa scripting adalah bahasa yang menafsirkan skrip saat runtime. Dan biasanya tertanam ke dalam lingkungan perangkat lunak lain. Karena php merupakan scripting server-side maka jenis bahasa pemrograman ini nantinya script/program tersebut akan dijalankan/diproses oleh server. Berbeda dengan javascript yang client-side. PHP adalah bahasa pemrograman umum yang berarti php dapat disematkan ke dalam kode HTML, atau dapat digunakan dalam kombinasi dengan berbagai sistem templat web, sistem manajemen konten web, dan kerangka kerja web. Pengertian MySQL MySQL adalah sebuah database management system yang menggunakan perintah dasar SQL. SQL sendiri singkatan dari (Structured Query Language) yang merupakan suatu bahasa yang dipakai di dalam pengambilan data pada relational database atau database yang terstruktur. Jadi MySQL adalah database management system yang menggunakan bahasa SQL sebagai bahasa penghubung antara perangkat lunak aplikasi dengan database server. Menghubungkan PHP dan database adalah suatu keharusan yang dasar dalam pemrograman web. karena dengan menghubungkan PHP dan database, kita bisa mengakses database untuk berinteraksi lebih lanjut. contohnya seperti menginput data ke database, menampilkan data dari database, mengedit data dari database, menghapus data dari database. serta interaksi data ke database lainnya yang akan kita lakukan. Code Connect <?php $conn = new mysqli(\"localhost\", \"root\", \"\", \"mydb\"); if ($conn -> connect_error) { die($conn -> connect_error); } ?> $conn -> variabel untuk menyimpan hasil koneksi ke database. new -> syntax untuk membuat objek baru. mysqli() -> objek untuk membuat koneksi ke database. localhost -> servername. root -> username. null -> password. mydb -> database name. die() -> fungsi untuk menampilkan string error. connect_error -> objek untuk cek koneksi error.","title":"Home"},{"location":"#pendahuluan","text":"","title":"Pendahuluan"},{"location":"#pengertian-php","text":"PHP adalah bahasa scripting server-side, Bahasa pemrograman yang digunakan untuk mengembangkan situs web statis atau situs web dinamis atau aplikasi Web. PHP singkatan dari Hypertext Pre-processor, yang sebelumnya disebut Personal Home Pages. Script sendiri merupakan sekumpulan instruksi pemrograman yang ditafsirkan pada saat runtime. Sedangkan Bahasa scripting adalah bahasa yang menafsirkan skrip saat runtime. Dan biasanya tertanam ke dalam lingkungan perangkat lunak lain. Karena php merupakan scripting server-side maka jenis bahasa pemrograman ini nantinya script/program tersebut akan dijalankan/diproses oleh server. Berbeda dengan javascript yang client-side. PHP adalah bahasa pemrograman umum yang berarti php dapat disematkan ke dalam kode HTML, atau dapat digunakan dalam kombinasi dengan berbagai sistem templat web, sistem manajemen konten web, dan kerangka kerja web.","title":"Pengertian PHP"},{"location":"#pengertian-mysql","text":"MySQL adalah sebuah database management system yang menggunakan perintah dasar SQL. SQL sendiri singkatan dari (Structured Query Language) yang merupakan suatu bahasa yang dipakai di dalam pengambilan data pada relational database atau database yang terstruktur. Jadi MySQL adalah database management system yang menggunakan bahasa SQL sebagai bahasa penghubung antara perangkat lunak aplikasi dengan database server. Menghubungkan PHP dan database adalah suatu keharusan yang dasar dalam pemrograman web. karena dengan menghubungkan PHP dan database, kita bisa mengakses database untuk berinteraksi lebih lanjut. contohnya seperti menginput data ke database, menampilkan data dari database, mengedit data dari database, menghapus data dari database. serta interaksi data ke database lainnya yang akan kita lakukan.","title":"Pengertian MySQL"},{"location":"#code-connect","text":"<?php $conn = new mysqli(\"localhost\", \"root\", \"\", \"mydb\"); if ($conn -> connect_error) { die($conn -> connect_error); } ?> $conn -> variabel untuk menyimpan hasil koneksi ke database. new -> syntax untuk membuat objek baru. mysqli() -> objek untuk membuat koneksi ke database. localhost -> servername. root -> username. null -> password. mydb -> database name. die() -> fungsi untuk menampilkan string error. connect_error -> objek untuk cek koneksi error.","title":"Code Connect"},{"location":"combined/","text":"Crud Data - Combined CRUD adalah singkatan dari Create, Read, Update, dan Delete. Proses ini sangat berkaitan dengan pengambilan atau transaksi data dari atau ke database. Hal ini menjadi krusial apabila berhubungan dengan sistem informasi perusahaan karena data yang diproses biasanya merupakan data transaksi. Bagi PHP Developer, operasi CRUD biasanya menjadi pillar untuk mempelajari proses pengelolaan data menggunakan PHP dan tentu saja MySQL database. CRUD ini bisa diibaratkan sebagai jalur atau koneksi yang menghubungkan antara bahasa pemrograman PHP dengan MySQL. Pada halaman ini akan dicontohkan penggabungan dari proses Create, Read, Update, dan Delete data. Tools yang digunakan adalah modal bootstrap dan datatables. Code PHP <?php require \"functions.php\"; $result = $conn -> query(\"SELECT * FROM mahasiswa\"); ?> require -> fungsi untuk memuat file php lain. $result -> variabel untuk menampung hasil query yang dibuat. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. Section Insert <div class=\"container mt-4\"> <h2 class=\"text-center\">Tabel Mahasiswa</h2><br> <!-- Insert Data --> <button type=\"button\" class=\"btn btn-success mx-auto\" data-bs-toggle=\"modal\" data-bs-target=\"#create\" style=\"display: block;\"> <i class=\"fas fa-plus-circle\"></i>&nbsp;Insert Data </button> <?php if (isset($_POST[\"insert\"]) ) { if (insert($_POST) === TRUE ) { echo \"<script>document.location.href='vModal.php';</script>\"; } else { echo $conn -> error; } } ?> <div class=\"modal fade\" id=\"create\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"> <div class=\"modal-dialog modal-dialog-scrollable modal-dialog-centered\"> <div class=\"modal-content\"> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <div class=\"modal-header\"> <h5 class=\"modal-title\" id=\"exampleModalLabel\">Insert Data</h5> <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button> </div> <div class=\"modal-body\"> <label for=\"nama\" class=\"form-label\">Nama</label> <input type=\"text\" class=\"form-control mb-3\" name=\"nama\" id=\"nama\" autocomplete=\"off\" required> <label for=\"prodi\" class=\"form-label\">Prodi</label> <input type=\"text\" class=\"form-control mb-3\" name=\"prodi\" id=\"prodi\" autocomplete=\"off\" required> <label for=\"fakultas\" class=\"form-label\">Fakultas</label> <input type=\"text\" class=\"form-control mb-3\" name=\"fakultas\" id=\"fakultas\" autocomplete=\"off\" required> <label for=\"gambar\" class=\"form-label\">Gambar</label> <input type=\"file\" class=\"form-control mb-3\" name=\"gambar\" id=\"gambar\" required> </div> <div class=\"modal-footer\"> <button type=\"submit\" name=\"insert\" class=\"btn btn-primary\">Submit</button> </div> </form> </div> </div> </div> <?php if(isset($errName)) : ?> <script> alert(\"Nama Sudah Ada\"); </script> <?php endif ?> <?php if(isset($errImg)) : ?> <script> alert(\"Hanya Menerima File .jpg .png .jpeg\"); </script> <?php endif ?> <?php if(isset($errSize)) : ?> <script> alert(\"Maksimal Ukuran Gambar 1MB\"); </script> <?php endif ?> isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. insert() -> fungsi yang dibuat untuk menambahkan data. echo -> fungsi untuk menampilkan teks ke layar. script -> elemen untuk menuliskan syntax javascript. document.location.href -> redirect halaman versi javascript. $conn -> variabel global yang berisi koneksi ke database. error -> objek untuk cek error yang terjadi. $err.. -> variabel yang menampung status data error. alert() -> fungsi javascript untuk menampilkan pop-up dialog. Section Read <!-- Read Data --> <table class=\"table table-striped table-borderless\" id=\"myTable\" style=\"padding: 20px 0;\"> <thead class=\"table-dark\"> <tr> <th>No</th> <th>Gambar</th> <th>Nama</th> <th>Prodi</th> <th>Fakultas</th> <th>Aksi</th> </tr> </thead> <tbody> <?php $i = 1 ?> <?php while($row = $result -> fetch_assoc()) : ?> <tr> <td><?= $i++ ?></td> <td><img src=\"img/<?= $row['gambar'] ?>\" alt=\"Gambar\" width=\"60\"></td> <td><?= $row[\"nama\"] ?></td> <td><?= $row[\"prodi\"] ?></td> <td><?= $row[\"fakultas\"] ?></td> <td width=\"100\"> <a href=\"\" data-bs-toggle=\"modal\" data-bs-target=\"#id<?= $row[\"id\"] ?>\" style=\"text-decoration: none\"> <i class=\"fas fa-edit\" style=\"color: blue\"></i> </a> &emsp; <a href=\"delete.php?id=<?= $row['id'] ?>\" onclick=\"return confirm('Yakin?')\" style=\"text-decoration: none\"> <i class=\"fas fa-trash-alt\" style=\"color: red\"></i> </a> </td> </tr> $row -> variabel untuk menampung hasil konversi query yang sudah berbentuk array asosiatif. $result -> variabel untuk menampung hasil query yang dibuat sebelumnya. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif. Section Update <!-- Update Data --> <?php if (isset($_POST[\"update\"]) ) { if (update($_POST) === TRUE ) { echo \"<script>document.location.href='vModal.php';</script>\"; } else { echo $conn -> error; } } ?> <div class=\"modal fade\" id=\"id<?= $row[\"id\"] ?>\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"> <div class=\"modal-dialog modal-dialog-scrollable modal-dialog-centered\"> <div class=\"modal-content\"> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <div class=\"modal-header\"> <h5 class=\"modal-title\" id=\"exampleModalLabel\">Update Data</h5> <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button> </div> <div class=\"modal-body\"> <input type=\"hidden\" name=\"id\" value=\"<?= $row[\"id\"] ?>\"> <input type=\"hidden\" name=\"gambarLama\" value=\"<?= $row[\"gambar\"] ?>\"> <label for=\"nama\" class=\"form-label\">Nama</label> <input type=\"text\" class=\"form-control mb-3\" name=\"nama\" id=\"nama\" autocomplete=\"off\" required value=\"<?= $row[\"nama\"] ?>\"> <label for=\"prodi\" class=\"form-label\">Prodi</label> <input type=\"text\" class=\"form-control mb-3\" name=\"prodi\" id=\"prodi\" autocomplete=\"off\" required value=\"<?= $row[\"prodi\"] ?>\"> <label for=\"fakultas\" class=\"form-label\">Fakultas</label> <input type=\"text\" class=\"form-control mb-3\" name=\"fakultas\" id=\"fakultas\" autocomplete=\"off\" required value=\"<?= $row[\"fakultas\"] ?>\"> <label for=\"gambar\" class=\"form-label\">Gambar</label><br> <img src=\"img/<?= $row['gambar'] ?>\" alt=\"Gambar\" width=\"100\" class=\"mb-2\"> <input type=\"file\" class=\"form-control mb-3\" name=\"gambar\" id=\"gambar\"> </div> <div class=\"modal-footer\"> <button type=\"submit\" name=\"update\" class=\"btn btn-primary\">Submit</button> </div> </form> </div> </div> </div> <?php endwhile ?> <?php if(isset($errImg)) : ?> <script> alert(\"Hanya Menerima File .jpg .png .jpeg\"); </script> <?php endif ?> <?php if(isset($errSize)) : ?> <script> alert(\"Maksimal Ukuran Gambar 1MB\"); </script> <?php endif ?></tbody></table></div> isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. update() -> fungsi yang dibuat untuk mengubah data. echo -> fungsi untuk menampilkan teks ke layar. script -> elemen untuk menuliskan syntax javascript. document.location.href -> redirect halaman versi javascript. $conn -> variabel global yang berisi koneksi ke database. error -> objek untuk cek error yang terjadi. $err.. -> variabel yang menampung status data error. alert() -> fungsi javascript untuk menampilkan pop-up dialog.","title":"Combined"},{"location":"combined/#crud-data-combined","text":"CRUD adalah singkatan dari Create, Read, Update, dan Delete. Proses ini sangat berkaitan dengan pengambilan atau transaksi data dari atau ke database. Hal ini menjadi krusial apabila berhubungan dengan sistem informasi perusahaan karena data yang diproses biasanya merupakan data transaksi. Bagi PHP Developer, operasi CRUD biasanya menjadi pillar untuk mempelajari proses pengelolaan data menggunakan PHP dan tentu saja MySQL database. CRUD ini bisa diibaratkan sebagai jalur atau koneksi yang menghubungkan antara bahasa pemrograman PHP dengan MySQL. Pada halaman ini akan dicontohkan penggabungan dari proses Create, Read, Update, dan Delete data. Tools yang digunakan adalah modal bootstrap dan datatables.","title":"Crud Data - Combined"},{"location":"combined/#code-php","text":"<?php require \"functions.php\"; $result = $conn -> query(\"SELECT * FROM mahasiswa\"); ?> require -> fungsi untuk memuat file php lain. $result -> variabel untuk menampung hasil query yang dibuat. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query.","title":"Code PHP"},{"location":"combined/#section-insert","text":"<div class=\"container mt-4\"> <h2 class=\"text-center\">Tabel Mahasiswa</h2><br> <!-- Insert Data --> <button type=\"button\" class=\"btn btn-success mx-auto\" data-bs-toggle=\"modal\" data-bs-target=\"#create\" style=\"display: block;\"> <i class=\"fas fa-plus-circle\"></i>&nbsp;Insert Data </button> <?php if (isset($_POST[\"insert\"]) ) { if (insert($_POST) === TRUE ) { echo \"<script>document.location.href='vModal.php';</script>\"; } else { echo $conn -> error; } } ?> <div class=\"modal fade\" id=\"create\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"> <div class=\"modal-dialog modal-dialog-scrollable modal-dialog-centered\"> <div class=\"modal-content\"> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <div class=\"modal-header\"> <h5 class=\"modal-title\" id=\"exampleModalLabel\">Insert Data</h5> <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button> </div> <div class=\"modal-body\"> <label for=\"nama\" class=\"form-label\">Nama</label> <input type=\"text\" class=\"form-control mb-3\" name=\"nama\" id=\"nama\" autocomplete=\"off\" required> <label for=\"prodi\" class=\"form-label\">Prodi</label> <input type=\"text\" class=\"form-control mb-3\" name=\"prodi\" id=\"prodi\" autocomplete=\"off\" required> <label for=\"fakultas\" class=\"form-label\">Fakultas</label> <input type=\"text\" class=\"form-control mb-3\" name=\"fakultas\" id=\"fakultas\" autocomplete=\"off\" required> <label for=\"gambar\" class=\"form-label\">Gambar</label> <input type=\"file\" class=\"form-control mb-3\" name=\"gambar\" id=\"gambar\" required> </div> <div class=\"modal-footer\"> <button type=\"submit\" name=\"insert\" class=\"btn btn-primary\">Submit</button> </div> </form> </div> </div> </div> <?php if(isset($errName)) : ?> <script> alert(\"Nama Sudah Ada\"); </script> <?php endif ?> <?php if(isset($errImg)) : ?> <script> alert(\"Hanya Menerima File .jpg .png .jpeg\"); </script> <?php endif ?> <?php if(isset($errSize)) : ?> <script> alert(\"Maksimal Ukuran Gambar 1MB\"); </script> <?php endif ?> isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. insert() -> fungsi yang dibuat untuk menambahkan data. echo -> fungsi untuk menampilkan teks ke layar. script -> elemen untuk menuliskan syntax javascript. document.location.href -> redirect halaman versi javascript. $conn -> variabel global yang berisi koneksi ke database. error -> objek untuk cek error yang terjadi. $err.. -> variabel yang menampung status data error. alert() -> fungsi javascript untuk menampilkan pop-up dialog.","title":"Section Insert"},{"location":"combined/#section-read","text":"<!-- Read Data --> <table class=\"table table-striped table-borderless\" id=\"myTable\" style=\"padding: 20px 0;\"> <thead class=\"table-dark\"> <tr> <th>No</th> <th>Gambar</th> <th>Nama</th> <th>Prodi</th> <th>Fakultas</th> <th>Aksi</th> </tr> </thead> <tbody> <?php $i = 1 ?> <?php while($row = $result -> fetch_assoc()) : ?> <tr> <td><?= $i++ ?></td> <td><img src=\"img/<?= $row['gambar'] ?>\" alt=\"Gambar\" width=\"60\"></td> <td><?= $row[\"nama\"] ?></td> <td><?= $row[\"prodi\"] ?></td> <td><?= $row[\"fakultas\"] ?></td> <td width=\"100\"> <a href=\"\" data-bs-toggle=\"modal\" data-bs-target=\"#id<?= $row[\"id\"] ?>\" style=\"text-decoration: none\"> <i class=\"fas fa-edit\" style=\"color: blue\"></i> </a> &emsp; <a href=\"delete.php?id=<?= $row['id'] ?>\" onclick=\"return confirm('Yakin?')\" style=\"text-decoration: none\"> <i class=\"fas fa-trash-alt\" style=\"color: red\"></i> </a> </td> </tr> $row -> variabel untuk menampung hasil konversi query yang sudah berbentuk array asosiatif. $result -> variabel untuk menampung hasil query yang dibuat sebelumnya. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif.","title":"Section Read"},{"location":"combined/#section-update","text":"<!-- Update Data --> <?php if (isset($_POST[\"update\"]) ) { if (update($_POST) === TRUE ) { echo \"<script>document.location.href='vModal.php';</script>\"; } else { echo $conn -> error; } } ?> <div class=\"modal fade\" id=\"id<?= $row[\"id\"] ?>\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"> <div class=\"modal-dialog modal-dialog-scrollable modal-dialog-centered\"> <div class=\"modal-content\"> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <div class=\"modal-header\"> <h5 class=\"modal-title\" id=\"exampleModalLabel\">Update Data</h5> <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button> </div> <div class=\"modal-body\"> <input type=\"hidden\" name=\"id\" value=\"<?= $row[\"id\"] ?>\"> <input type=\"hidden\" name=\"gambarLama\" value=\"<?= $row[\"gambar\"] ?>\"> <label for=\"nama\" class=\"form-label\">Nama</label> <input type=\"text\" class=\"form-control mb-3\" name=\"nama\" id=\"nama\" autocomplete=\"off\" required value=\"<?= $row[\"nama\"] ?>\"> <label for=\"prodi\" class=\"form-label\">Prodi</label> <input type=\"text\" class=\"form-control mb-3\" name=\"prodi\" id=\"prodi\" autocomplete=\"off\" required value=\"<?= $row[\"prodi\"] ?>\"> <label for=\"fakultas\" class=\"form-label\">Fakultas</label> <input type=\"text\" class=\"form-control mb-3\" name=\"fakultas\" id=\"fakultas\" autocomplete=\"off\" required value=\"<?= $row[\"fakultas\"] ?>\"> <label for=\"gambar\" class=\"form-label\">Gambar</label><br> <img src=\"img/<?= $row['gambar'] ?>\" alt=\"Gambar\" width=\"100\" class=\"mb-2\"> <input type=\"file\" class=\"form-control mb-3\" name=\"gambar\" id=\"gambar\"> </div> <div class=\"modal-footer\"> <button type=\"submit\" name=\"update\" class=\"btn btn-primary\">Submit</button> </div> </form> </div> </div> </div> <?php endwhile ?> <?php if(isset($errImg)) : ?> <script> alert(\"Hanya Menerima File .jpg .png .jpeg\"); </script> <?php endif ?> <?php if(isset($errSize)) : ?> <script> alert(\"Maksimal Ukuran Gambar 1MB\"); </script> <?php endif ?></tbody></table></div> isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. update() -> fungsi yang dibuat untuk mengubah data. echo -> fungsi untuk menampilkan teks ke layar. script -> elemen untuk menuliskan syntax javascript. document.location.href -> redirect halaman versi javascript. $conn -> variabel global yang berisi koneksi ke database. error -> objek untuk cek error yang terjadi. $err.. -> variabel yang menampung status data error. alert() -> fungsi javascript untuk menampilkan pop-up dialog.","title":"Section Update"},{"location":"cookie/","text":"Cookie Cookie merupakan data yang disimpan dalam browser yang dapat digunakan secara global di browser tersebut. Contoh penggunaan cookie adalah ketika user melakukan login ke halaman website tertentu, biasanya terdapat inputan \"Remember Me\" yang jika dicheck maka browser akan mengingat bahwa user tersebut telah login. Cookie akan terus ada selama cookie tersebut tidak dihapus secara manual dengan menggunakan code PHP. Code Cookie <?php // Membuat Cookie if(isset($_POST[\"remember\"])) { setcookie(\"id\", $row[\"id_user\"], time()+3600); setcookie(\"key\", hash(\"sha256\", $row[\"username\"]), time()+3600); } // Menghapus Cookie setcookie(\"id\", \"\", time()-3600); setcookie(\"key\", \"\", time()-3600); ?> isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. setcookie() -> fungsi untuk membuat cookie. hash() -> fungsi untuk melakukan hashing menggunakan algoritma satu arah. time() -> fungsi untuk mengambil waktu sekarang pada server dalam format timestamp. Code PHP <?php session_start(); require \"functions.php\"; if (isset($_COOKIE[\"id\"]) && isset($_COOKIE[\"key\"])) { $id = $_COOKIE[\"id\"]; $key = $_COOKIE[\"key\"]; $result = $conn -> query(\"SELECT username FROM user WHERE id_user=$id \"); $row = $result -> fetch_assoc(); if ($key === hash(\"sha256\", $row[\"username\"])) { $_SESSION[\"login\"] = true; $_SESSION[\"username\"] = $row[\"username\"]; } } ?> session_start() -> fungsi untuk memulai eksekusi session pada server. require -> fungsi untuk memuat file php lain. isset() -> fungsi untuk memeriksa status objek. $_COOKIE -> variabel superglobal untuk menyimpan data ke dalam browser. $result -> variabel untuk menampung hasil query yang dibuat. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. $row -> variabel untuk menampung hasil konversi query yang sudah berbentuk array asosiatif. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif. hash() -> fungsi untuk melakukan hashing menggunakan algoritma satu arah. $_SESSION -> variabel superglobal untuk menyimpan data ke dalam server.","title":"Cookie"},{"location":"cookie/#cookie","text":"Cookie merupakan data yang disimpan dalam browser yang dapat digunakan secara global di browser tersebut. Contoh penggunaan cookie adalah ketika user melakukan login ke halaman website tertentu, biasanya terdapat inputan \"Remember Me\" yang jika dicheck maka browser akan mengingat bahwa user tersebut telah login. Cookie akan terus ada selama cookie tersebut tidak dihapus secara manual dengan menggunakan code PHP.","title":"Cookie"},{"location":"cookie/#code-cookie","text":"<?php // Membuat Cookie if(isset($_POST[\"remember\"])) { setcookie(\"id\", $row[\"id_user\"], time()+3600); setcookie(\"key\", hash(\"sha256\", $row[\"username\"]), time()+3600); } // Menghapus Cookie setcookie(\"id\", \"\", time()-3600); setcookie(\"key\", \"\", time()-3600); ?> isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. setcookie() -> fungsi untuk membuat cookie. hash() -> fungsi untuk melakukan hashing menggunakan algoritma satu arah. time() -> fungsi untuk mengambil waktu sekarang pada server dalam format timestamp.","title":"Code Cookie"},{"location":"cookie/#code-php","text":"<?php session_start(); require \"functions.php\"; if (isset($_COOKIE[\"id\"]) && isset($_COOKIE[\"key\"])) { $id = $_COOKIE[\"id\"]; $key = $_COOKIE[\"key\"]; $result = $conn -> query(\"SELECT username FROM user WHERE id_user=$id \"); $row = $result -> fetch_assoc(); if ($key === hash(\"sha256\", $row[\"username\"])) { $_SESSION[\"login\"] = true; $_SESSION[\"username\"] = $row[\"username\"]; } } ?> session_start() -> fungsi untuk memulai eksekusi session pada server. require -> fungsi untuk memuat file php lain. isset() -> fungsi untuk memeriksa status objek. $_COOKIE -> variabel superglobal untuk menyimpan data ke dalam browser. $result -> variabel untuk menampung hasil query yang dibuat. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. $row -> variabel untuk menampung hasil konversi query yang sudah berbentuk array asosiatif. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif. hash() -> fungsi untuk melakukan hashing menggunakan algoritma satu arah. $_SESSION -> variabel superglobal untuk menyimpan data ke dalam server.","title":"Code PHP"},{"location":"delete/","text":"Menghapus Data Delete adalah proses untuk menghapus data yang ada di database. Proses ini biasanya dilakukan ketika kita ingin menghapus sebuah data pada halaman website. Saat kita hendak melakukannya maka website akan mengirimkan proses Delete ke dalam database, dan database meresponnya dengan menghapus data yang bersangkutan. Code PHP <?php require \"functions.php\"; $id = $_GET[\"id\"]; $delete = \"DELETE FROM mahasiswa WHERE id = $id\"; if ($conn -> query($delete) === TRUE ) { header(\"Location: index.php\"); } else { echo $conn -> error; } ?> require -> fungsi untuk memuat file php lain. $_GET -> variabel superglobal untuk menampung data yang dikirimkan melalui url. $delete -> variabel untuk menampung query delete data. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. header() -> fungsi untuk redirect halaman. echo -> fungsi untuk menampilkan teks ke layar. error -> objek untuk cek error yang terjadi.","title":"Delete"},{"location":"delete/#menghapus-data","text":"Delete adalah proses untuk menghapus data yang ada di database. Proses ini biasanya dilakukan ketika kita ingin menghapus sebuah data pada halaman website. Saat kita hendak melakukannya maka website akan mengirimkan proses Delete ke dalam database, dan database meresponnya dengan menghapus data yang bersangkutan.","title":"Menghapus Data"},{"location":"delete/#code-php","text":"<?php require \"functions.php\"; $id = $_GET[\"id\"]; $delete = \"DELETE FROM mahasiswa WHERE id = $id\"; if ($conn -> query($delete) === TRUE ) { header(\"Location: index.php\"); } else { echo $conn -> error; } ?> require -> fungsi untuk memuat file php lain. $_GET -> variabel superglobal untuk menampung data yang dikirimkan melalui url. $delete -> variabel untuk menampung query delete data. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. header() -> fungsi untuk redirect halaman. echo -> fungsi untuk menampilkan teks ke layar. error -> objek untuk cek error yang terjadi.","title":"Code PHP"},{"location":"insert/","text":"Menambahkan Data Create/Insert Data merupakan proses pembuatan data baru. Proses ini biasanya dilakukan ketika kita ingin memasukkan data pada sebuah halaman website. Data yang kita masukkan akan disimpan di dalam database menggunakan operasi Create. Function function insert($data) { global $conn; $nama = htmlspecialchars($data[\"nama\"]); $prodi = htmlspecialchars($data[\"prodi\"]); $fakultas = htmlspecialchars($data[\"fakultas\"]); $gambar = upload(); if (!$gambar) { return false; } $cek = $conn -> query(\"SELECT nama FROM mahasiswa WHERE nama='$nama' \"); if ($cek -> num_rows >= 1) { global $errName; $errName = true; return false; } $insert = \"INSERT INTO mahasiswa VALUES (NULL, '$gambar', '$nama', '$prodi', '$fakultas' )\"; return $conn -> query($insert); } insert() -> fungsi yang dibuat untuk menambahkan data. $data -> parameter dari fungsi insert() berupa data yang dikirimkan. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $conn -> variabel global yang berisi koneksi ke database. htmlspecialchars() -> fungsi untuk mengkonversi karakter khusus menjadi entitas html. upload() -> fungsi upload yang telah dibuat sebelumnya. $cek -> variabel untuk menampung hasil query yang dibuat untuk cek data. query() -> fungsi untuk membuat query. num_rows -> objek untuk mengetahui jumlah baris dari tabel hasil query. $err.. -> variabel yang menampung status data error. $insert -> variabel untuk menampung query insert data. return -> nilai yang dikembalikan saat fungsi dipanggil. Code PHP <?php require \"functions.php\"; if (isset($_POST[\"insert\"]) ) { if (insert($_POST) === TRUE ) { header(\"Location: index.php\"); } else { echo $conn -> error; } } ?> require -> fungsi untuk memuat file php lain. isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. insert() -> fungsi yang dibuat untuk menambahkan data. header() -> fungsi untuk redirect halaman. echo -> fungsi untuk menampilkan teks ke layar. error -> objek untuk cek error yang terjadi. Code HTML <body> <h2>Insert Data</h2><br> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <label for=\"nama\">Nama</label><br> <input type=\"text\" name=\"nama\" id=\"nama\" autocomplete=\"off\" required><br><br> <label for=\"prodi\">Prodi</label><br> <input type=\"text\" name=\"prodi\" id=\"prodi\" autocomplete=\"off\" required><br><br> <label for=\"fakultas\">Fakultas</label><br> <input type=\"text\" name=\"fakultas\" id=\"fakultas\" autocomplete=\"off\" required><br><br> <label for=\"gambar\">Gambar</label><br> <input type=\"file\" name=\"gambar\" id=\"gambar\" required><br><br> <button type=\"submit\" name=\"insert\"> Submit </button>&emsp; <?php if(isset($errName)) : ?> <i>Nama Sudah Ada</i> <?php endif ?> <?php if(isset($errImg)) : ?> <i>Hanya Menerima File .jpg .png .jpeg</i> <?php endif ?> <?php if(isset($errSize)) : ?> <i>Maksimal Ukuran Gambar 1MB</i> <?php endif ?> </form> </body> isset() -> fungsi untuk memeriksa status objek. $err.. -> variabel yang menampung status data error.","title":"Insert"},{"location":"insert/#menambahkan-data","text":"Create/Insert Data merupakan proses pembuatan data baru. Proses ini biasanya dilakukan ketika kita ingin memasukkan data pada sebuah halaman website. Data yang kita masukkan akan disimpan di dalam database menggunakan operasi Create.","title":"Menambahkan Data"},{"location":"insert/#function","text":"function insert($data) { global $conn; $nama = htmlspecialchars($data[\"nama\"]); $prodi = htmlspecialchars($data[\"prodi\"]); $fakultas = htmlspecialchars($data[\"fakultas\"]); $gambar = upload(); if (!$gambar) { return false; } $cek = $conn -> query(\"SELECT nama FROM mahasiswa WHERE nama='$nama' \"); if ($cek -> num_rows >= 1) { global $errName; $errName = true; return false; } $insert = \"INSERT INTO mahasiswa VALUES (NULL, '$gambar', '$nama', '$prodi', '$fakultas' )\"; return $conn -> query($insert); } insert() -> fungsi yang dibuat untuk menambahkan data. $data -> parameter dari fungsi insert() berupa data yang dikirimkan. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $conn -> variabel global yang berisi koneksi ke database. htmlspecialchars() -> fungsi untuk mengkonversi karakter khusus menjadi entitas html. upload() -> fungsi upload yang telah dibuat sebelumnya. $cek -> variabel untuk menampung hasil query yang dibuat untuk cek data. query() -> fungsi untuk membuat query. num_rows -> objek untuk mengetahui jumlah baris dari tabel hasil query. $err.. -> variabel yang menampung status data error. $insert -> variabel untuk menampung query insert data. return -> nilai yang dikembalikan saat fungsi dipanggil.","title":"Function"},{"location":"insert/#code-php","text":"<?php require \"functions.php\"; if (isset($_POST[\"insert\"]) ) { if (insert($_POST) === TRUE ) { header(\"Location: index.php\"); } else { echo $conn -> error; } } ?> require -> fungsi untuk memuat file php lain. isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. insert() -> fungsi yang dibuat untuk menambahkan data. header() -> fungsi untuk redirect halaman. echo -> fungsi untuk menampilkan teks ke layar. error -> objek untuk cek error yang terjadi.","title":"Code PHP"},{"location":"insert/#code-html","text":"<body> <h2>Insert Data</h2><br> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <label for=\"nama\">Nama</label><br> <input type=\"text\" name=\"nama\" id=\"nama\" autocomplete=\"off\" required><br><br> <label for=\"prodi\">Prodi</label><br> <input type=\"text\" name=\"prodi\" id=\"prodi\" autocomplete=\"off\" required><br><br> <label for=\"fakultas\">Fakultas</label><br> <input type=\"text\" name=\"fakultas\" id=\"fakultas\" autocomplete=\"off\" required><br><br> <label for=\"gambar\">Gambar</label><br> <input type=\"file\" name=\"gambar\" id=\"gambar\" required><br><br> <button type=\"submit\" name=\"insert\"> Submit </button>&emsp; <?php if(isset($errName)) : ?> <i>Nama Sudah Ada</i> <?php endif ?> <?php if(isset($errImg)) : ?> <i>Hanya Menerima File .jpg .png .jpeg</i> <?php endif ?> <?php if(isset($errSize)) : ?> <i>Maksimal Ukuran Gambar 1MB</i> <?php endif ?> </form> </body> isset() -> fungsi untuk memeriksa status objek. $err.. -> variabel yang menampung status data error.","title":"Code HTML"},{"location":"login/","text":"Login Login adalah suatu proses untuk masuk ke dalam sebuah layanan online. Metode login sendiri sekarang sudah variatif. Login bisa dilakukan dengan menggunakan username dan password, atau bisa juga menggunakan social media yang terintegrasi pada sistem tersebut. Function function login($data) { global $conn; $username = $data[\"username\"]; $password = $data[\"password\"]; $cek = $conn -> query(\"SELECT * FROM user WHERE username='$username'\"); if($cek -> num_rows >= 1) { $row = $cek -> fetch_assoc(); if (password_verify($password, $row[\"password\"])) { $_SESSION[\"login\"] = true; $_SESSION[\"username\"] = $username; } else { global $errPw; $errPw = true; return false; } } global $errAcc; $errAcc = true; return $conn -> affected_rows; } login() -> fungsi yang dibuat untuk melakukan login. $data -> parameter dari fungsi insert() berupa data yang dikirimkan. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $conn -> variabel global yang berisi koneksi ke database. $cek -> variabel untuk menampung hasil query yang dibuat untuk cek data. query() -> fungsi untuk membuat query. num_rows -> objek untuk mengetahui jumlah baris dari tabel hasil query. $row -> variabel untuk menampung hasil konversi query yang sudah berbentuk array asosiatif. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif. password_verify() -> fungsi untuk mencocokkan data yang telah terhash. $_SESSION -> variabel superglobal untuk menyimpan data ke dalam server. $err.. -> variabel yang menampung status data error. return -> nilai yang dikembalikan saat fungsi dipanggil. affected_rows -> objek untuk melihat jumlah baris yang terpengaruh dari query yang dibuat. Code PHP <?php require \"functions.php\"; if (isset($_POST[\"login\"])) { if (login($_POST) > 0) { header(\"Location: index.php\"); } else { echo $conn -> error; } } ?> require -> fungsi untuk memuat file php lain. isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. login() -> fungsi yang dibuat untuk melakukan login. header() -> fungsi untuk redirect halaman. echo -> fungsi untuk menampilkan teks ke layar. error -> objek untuk cek error yang terjadi. Code HTML <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Login</title> </head> <body> <h2>Login</h2><br> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <label for=\"username\">Username</label><br> <input type=\"text\" name=\"username\" id=\"username\" autocomplete=\"off\" required><br><br> <label for=\"password\">Password</label><br> <input type=\"password\" name=\"password\" id=\"password\" required><br><br> <button type=\"submit\" name=\"login\"> Submit </button>&emsp; <?php if(isset($errAcc)) : ?> <i style=\"color: red;\">Akun Belum Terdaftar</i> <?php endif ?> <?php if(isset($errPw)) : ?> <i style=\"color: red;\">Password Salah</i> <?php endif ?> <p>Belum punya akun? <a href=\"register.php\">Buat Akun</a></p> </form> </body> </html> isset() -> fungsi untuk memeriksa status objek. $err.. -> variabel yang menampung status data error.","title":"Login"},{"location":"login/#login","text":"Login adalah suatu proses untuk masuk ke dalam sebuah layanan online. Metode login sendiri sekarang sudah variatif. Login bisa dilakukan dengan menggunakan username dan password, atau bisa juga menggunakan social media yang terintegrasi pada sistem tersebut.","title":"Login"},{"location":"login/#function","text":"function login($data) { global $conn; $username = $data[\"username\"]; $password = $data[\"password\"]; $cek = $conn -> query(\"SELECT * FROM user WHERE username='$username'\"); if($cek -> num_rows >= 1) { $row = $cek -> fetch_assoc(); if (password_verify($password, $row[\"password\"])) { $_SESSION[\"login\"] = true; $_SESSION[\"username\"] = $username; } else { global $errPw; $errPw = true; return false; } } global $errAcc; $errAcc = true; return $conn -> affected_rows; } login() -> fungsi yang dibuat untuk melakukan login. $data -> parameter dari fungsi insert() berupa data yang dikirimkan. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $conn -> variabel global yang berisi koneksi ke database. $cek -> variabel untuk menampung hasil query yang dibuat untuk cek data. query() -> fungsi untuk membuat query. num_rows -> objek untuk mengetahui jumlah baris dari tabel hasil query. $row -> variabel untuk menampung hasil konversi query yang sudah berbentuk array asosiatif. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif. password_verify() -> fungsi untuk mencocokkan data yang telah terhash. $_SESSION -> variabel superglobal untuk menyimpan data ke dalam server. $err.. -> variabel yang menampung status data error. return -> nilai yang dikembalikan saat fungsi dipanggil. affected_rows -> objek untuk melihat jumlah baris yang terpengaruh dari query yang dibuat.","title":"Function"},{"location":"login/#code-php","text":"<?php require \"functions.php\"; if (isset($_POST[\"login\"])) { if (login($_POST) > 0) { header(\"Location: index.php\"); } else { echo $conn -> error; } } ?> require -> fungsi untuk memuat file php lain. isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. login() -> fungsi yang dibuat untuk melakukan login. header() -> fungsi untuk redirect halaman. echo -> fungsi untuk menampilkan teks ke layar. error -> objek untuk cek error yang terjadi.","title":"Code PHP"},{"location":"login/#code-html","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Login</title> </head> <body> <h2>Login</h2><br> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <label for=\"username\">Username</label><br> <input type=\"text\" name=\"username\" id=\"username\" autocomplete=\"off\" required><br><br> <label for=\"password\">Password</label><br> <input type=\"password\" name=\"password\" id=\"password\" required><br><br> <button type=\"submit\" name=\"login\"> Submit </button>&emsp; <?php if(isset($errAcc)) : ?> <i style=\"color: red;\">Akun Belum Terdaftar</i> <?php endif ?> <?php if(isset($errPw)) : ?> <i style=\"color: red;\">Password Salah</i> <?php endif ?> <p>Belum punya akun? <a href=\"register.php\">Buat Akun</a></p> </form> </body> </html> isset() -> fungsi untuk memeriksa status objek. $err.. -> variabel yang menampung status data error.","title":"Code HTML"},{"location":"pagination/","text":"Pagination Pagination adalah proses membagi konten atau bagian dari konten yang ada pada situs web menjadi beberapa halaman terpisah. Pagination dirancang untuk membantu pengunjung situs agar tidak kewalahan oleh banyak informasi yang termuat di satu halaman ke halaman yang berbeda. Code PHP <?php require \"functions.php\"; $limit = 10; $result = $conn -> query(\"SELECT * FROM mahasiswa\"); $data = $result -> num_rows; $page = ceil($data / $limit); $aktif = (isset($_GET[\"p\"])) ? $_GET[\"p\"] : 1; $awal = ($limit * $aktif) - $limit; $menu = $conn -> query(\"SELECT * FROM mahasiswa LIMIT $awal, $limit\"); ?> require -> fungsi untuk memuat file php lain. $limit -> variabel untuk menampung banyak data yang akan ditampilkan pada satu halaman. $result -> variabel untuk menampung hasil query yang dibuat. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. $data -> variabel untuk menampung semua data hasil query. num_rows -> objek untuk mengetahui jumlah baris dari tabel hasil query. $page -> variabel untuk menampung jumlah halaman. ceil() -> fungsi untuk membulatkan angka ke atas. $aktif -> variabel untuk menentukan halaman aktif. isset() -> fungsi untuk memeriksa status objek. $_GET -> variabel superglobal untuk menampung data yang dikirimkan melalui url. $awal -> variabel untuk menentukan data awal pada suatu halaman. $menu -> variabel untuk menampung hasil query yang dibuat. Code Pagination <!-- First --> <?php if($aktif > 1) : ?> <div><a href=\"?p=<?= 1; ?>\">First</a></div> <?php endif ?> <!-- Previous --> <?php if($aktif > 1) : ?> <div><a href=\"?p=<?= $aktif - 1; ?>\">&laquo;</a></div> <?php endif ?> <!-- Pagination --> <?php for ($i = 1; $i <= $page; $i++) : ?> <?php if ($i == $aktif) : ?> <div><a href=\"?p=<?= $i; ?>\" style=\"color: red;\"><?= $i; ?></a></div> <?php else : ?> <div><a href=\"?p=<?= $i; ?>\"><?= $i; ?></a></div> <?php endif ?> <?php endfor ?> <!-- Next --> <?php if($aktif < $page) : ?> <div><a href=\"?p=<?= $aktif + 1; ?>\">&raquo;</a></div> <?php endif ?> <!-- Last --> <?php if($aktif < $page) : ?> <div><a href=\"?p=<?= $page; ?>\">Last</a></div> <?php endif ?> First -> pagination untuk menampilkan halaman pertama. Previos -> pagination untuk menampilkan halaman sebelumnya. Pagination -> pagination untuk menampilkan setiap halaman. Next -> pagination untuk menampilkan halaman selanjutnya. Last -> pagination untuk menampilkan halaman terakhir.","title":"Pagination"},{"location":"pagination/#pagination","text":"Pagination adalah proses membagi konten atau bagian dari konten yang ada pada situs web menjadi beberapa halaman terpisah. Pagination dirancang untuk membantu pengunjung situs agar tidak kewalahan oleh banyak informasi yang termuat di satu halaman ke halaman yang berbeda.","title":"Pagination"},{"location":"pagination/#code-php","text":"<?php require \"functions.php\"; $limit = 10; $result = $conn -> query(\"SELECT * FROM mahasiswa\"); $data = $result -> num_rows; $page = ceil($data / $limit); $aktif = (isset($_GET[\"p\"])) ? $_GET[\"p\"] : 1; $awal = ($limit * $aktif) - $limit; $menu = $conn -> query(\"SELECT * FROM mahasiswa LIMIT $awal, $limit\"); ?> require -> fungsi untuk memuat file php lain. $limit -> variabel untuk menampung banyak data yang akan ditampilkan pada satu halaman. $result -> variabel untuk menampung hasil query yang dibuat. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. $data -> variabel untuk menampung semua data hasil query. num_rows -> objek untuk mengetahui jumlah baris dari tabel hasil query. $page -> variabel untuk menampung jumlah halaman. ceil() -> fungsi untuk membulatkan angka ke atas. $aktif -> variabel untuk menentukan halaman aktif. isset() -> fungsi untuk memeriksa status objek. $_GET -> variabel superglobal untuk menampung data yang dikirimkan melalui url. $awal -> variabel untuk menentukan data awal pada suatu halaman. $menu -> variabel untuk menampung hasil query yang dibuat.","title":"Code PHP"},{"location":"pagination/#code-pagination","text":"<!-- First --> <?php if($aktif > 1) : ?> <div><a href=\"?p=<?= 1; ?>\">First</a></div> <?php endif ?> <!-- Previous --> <?php if($aktif > 1) : ?> <div><a href=\"?p=<?= $aktif - 1; ?>\">&laquo;</a></div> <?php endif ?> <!-- Pagination --> <?php for ($i = 1; $i <= $page; $i++) : ?> <?php if ($i == $aktif) : ?> <div><a href=\"?p=<?= $i; ?>\" style=\"color: red;\"><?= $i; ?></a></div> <?php else : ?> <div><a href=\"?p=<?= $i; ?>\"><?= $i; ?></a></div> <?php endif ?> <?php endfor ?> <!-- Next --> <?php if($aktif < $page) : ?> <div><a href=\"?p=<?= $aktif + 1; ?>\">&raquo;</a></div> <?php endif ?> <!-- Last --> <?php if($aktif < $page) : ?> <div><a href=\"?p=<?= $page; ?>\">Last</a></div> <?php endif ?> First -> pagination untuk menampilkan halaman pertama. Previos -> pagination untuk menampilkan halaman sebelumnya. Pagination -> pagination untuk menampilkan setiap halaman. Next -> pagination untuk menampilkan halaman selanjutnya. Last -> pagination untuk menampilkan halaman terakhir.","title":"Code Pagination"},{"location":"read/","text":"Menampilkan Data Read merupakan proses pengambilan data dari database. Proses ini biasanya terjadi ketika kita ingin menampilkan data pada database. Read juga bisa digunakan pada saat kita ingin melakukan proses pencarian di halaman website tertentu. Saat kita melakukan pencarian maka website akan menjalankan proses Read untuk melakukan pengecekan ke database. Function <?php function search($key) { global $conn; $search = \"SELECT * FROM mahasiswa WHERE nama LIKE '%$key%' OR prodi LIKE '%$key%' OR fakultas LIKE '%$key%' \"; return $conn -> query($search); } ?> search() -> fungsi yang dibuat untuk melakukan pencarian. $key -> parameter dari fungsi search() yang berupa kata yang akan dicari. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $conn -> variabel global yang berisi koneksi ke database. $search -> variabel untuk menampung hasil query yang dibuat. query() -> fungsi untuk membuat query. return -> nilai yang dikembalikan saat fungsi dipanggil. Code PHP <?php require \"functions.php\"; $result = $conn -> query(\"SELECT * FROM mahasiswa\"); if (isset($_POST[\"search\"]) ) { $result = search($_POST[\"key\"]); } ?> require -> fungsi untuk memuat file php lain. $result -> variabel untuk menampung hasil query yang dibuat. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. search() -> fungsi yang dibuat untuk melakukan pencarian. Code HTML <body> <h1>Tabel Mahasiswa</h1><br> <a href=\"insert.php\">Insert Data</a><br><br> <form action=\"\" method=\"POST\"> <input type=\"text\" name=\"key\" autocomplete=\"off\"> <button type=\"submit\" name=\"search\">Search</button> </form><br> <table border=\"1\" cellpadding=\"10\" cellspacing=\"0\"> <tr> <th>No</th> <th>Gambar</th> <th>Nama</th> <th>Prodi</th> <th>Fakultas</th> <th>Aksi</th> </tr> <?php $i = 1 ?> <?php while($row = $result -> fetch_assoc()) : ?> <tr> <td><?= $i++ ?></td> <td> <img src=\"img/<?= $row['gambar'] ?>\" alt=\"Gambar\" width=\"60\"> </td> <td><?= $row[\"nama\"] ?></td> <td><?= $row[\"prodi\"] ?></td> <td><?= $row[\"fakultas\"] ?></td> <td> <a href=\"update.php?id=<?= $row['id'] ?>\">Update</a> - <a href=\"delete.php?id=<?= $row['id'] ?>\" onclick=\"return confirm('Yakin?')\">Delete</a> </td> </tr> <?php endwhile ?> </table> </body> $row -> variabel untuk menampung hasil konversi query yang sudah berbentuk array asosiatif. $result -> variabel untuk menampung hasil query yang dibuat sebelumnya. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif.","title":"Read"},{"location":"read/#menampilkan-data","text":"Read merupakan proses pengambilan data dari database. Proses ini biasanya terjadi ketika kita ingin menampilkan data pada database. Read juga bisa digunakan pada saat kita ingin melakukan proses pencarian di halaman website tertentu. Saat kita melakukan pencarian maka website akan menjalankan proses Read untuk melakukan pengecekan ke database.","title":"Menampilkan Data"},{"location":"read/#function","text":"<?php function search($key) { global $conn; $search = \"SELECT * FROM mahasiswa WHERE nama LIKE '%$key%' OR prodi LIKE '%$key%' OR fakultas LIKE '%$key%' \"; return $conn -> query($search); } ?> search() -> fungsi yang dibuat untuk melakukan pencarian. $key -> parameter dari fungsi search() yang berupa kata yang akan dicari. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $conn -> variabel global yang berisi koneksi ke database. $search -> variabel untuk menampung hasil query yang dibuat. query() -> fungsi untuk membuat query. return -> nilai yang dikembalikan saat fungsi dipanggil.","title":"Function"},{"location":"read/#code-php","text":"<?php require \"functions.php\"; $result = $conn -> query(\"SELECT * FROM mahasiswa\"); if (isset($_POST[\"search\"]) ) { $result = search($_POST[\"key\"]); } ?> require -> fungsi untuk memuat file php lain. $result -> variabel untuk menampung hasil query yang dibuat. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. search() -> fungsi yang dibuat untuk melakukan pencarian.","title":"Code PHP"},{"location":"read/#code-html","text":"<body> <h1>Tabel Mahasiswa</h1><br> <a href=\"insert.php\">Insert Data</a><br><br> <form action=\"\" method=\"POST\"> <input type=\"text\" name=\"key\" autocomplete=\"off\"> <button type=\"submit\" name=\"search\">Search</button> </form><br> <table border=\"1\" cellpadding=\"10\" cellspacing=\"0\"> <tr> <th>No</th> <th>Gambar</th> <th>Nama</th> <th>Prodi</th> <th>Fakultas</th> <th>Aksi</th> </tr> <?php $i = 1 ?> <?php while($row = $result -> fetch_assoc()) : ?> <tr> <td><?= $i++ ?></td> <td> <img src=\"img/<?= $row['gambar'] ?>\" alt=\"Gambar\" width=\"60\"> </td> <td><?= $row[\"nama\"] ?></td> <td><?= $row[\"prodi\"] ?></td> <td><?= $row[\"fakultas\"] ?></td> <td> <a href=\"update.php?id=<?= $row['id'] ?>\">Update</a> - <a href=\"delete.php?id=<?= $row['id'] ?>\" onclick=\"return confirm('Yakin?')\">Delete</a> </td> </tr> <?php endwhile ?> </table> </body> $row -> variabel untuk menampung hasil konversi query yang sudah berbentuk array asosiatif. $result -> variabel untuk menampung hasil query yang dibuat sebelumnya. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif.","title":"Code HTML"},{"location":"register/","text":"Register Register merupakan proses untuk mendaftar atau membuat akun baru ke dalam suatu layanan online. Tujuannya adalah agar kita bisa masuk dan mengakses konten utama dari layanan yang bersangkutan. Function function register($data) { global $conn; $username = htmlspecialchars($data[\"username\"]); $password = htmlspecialchars($data[\"password\"]); $password2 = htmlspecialchars($data[\"password2\"]); $cek = $conn -> query(\"SELECT username FROM user WHERE username='$username' \"); if ($cek -> num_rows >= 1 ) { global $errUname; $errUname = true; return false; } if ($password !== $password2) { global $errPw; $errPw = true; return false; } $password = password_hash($password, PASSWORD_DEFAULT); $register = \"INSERT INTO user VALUE (NULL, '$username', '$password')\"; return $conn -> query($register); } register() -> fungsi yang dibuat untuk registrasi. $data -> parameter dari fungsi register() berupa data yang dikirimkan. htmlspecialchars() -> fungsi untuk mengkonversi karakter khusus menjadi entitas html. $cek -> variabel untuk menampung hasil query yang dibuat untuk cek data. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. num_rows -> objek untuk mengetahui jumlah baris dari tabel hasil query. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $err.. -> variabel yang menampung status data error. password_hash() -> fungsi untuk melakukan hashing menggunakan algoritma satu arah. PASSWORD_DEFAULT -> algoritma bawaan untuk melakukan hash. $register -> variabel untuk menampung query register. return -> nilai yang dikembalikan saat fungsi dipanggil. Code PHP <?php require \"functions.php\"; if (isset($_POST[\"register\"])) { if (register($_POST) === TRUE ) { header(\"Location: login.php\"); } else { echo $conn -> error; } } ?> require -> fungsi untuk memuat file php lain. isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. register() -> fungsi yang dibuat untuk registrasi. header() -> fungsi untuk redirect halaman. echo -> fungsi untuk menampilkan teks ke layar. error -> objek untuk cek error yang terjadi. Code HTML <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Register</title> </head> <body> <h2>Register</h2><br> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <label for=\"username\">Username</label><br> <input type=\"text\" name=\"username\" id=\"username\" autocomplete=\"off\" required><br><br> <label for=\"password\">Password</label><br> <input type=\"password\" name=\"password\" id=\"password\" required><br><br> <label for=\"password2\">Confirm Pasword</label><br> <input type=\"password\" name=\"password2\" id=\"password2\" required><br><br> <button type=\"submit\" name=\"register\"> Submit </button>&emsp; <?php if(isset($errUname)) : ?> <i style=\"color: red;\">Username Sudah Terdaftar</i> <?php endif ?> <?php if(isset($errPw)) : ?> <i style=\"color: red;\">Password Tidak Sesuai</i> <?php endif ?> <p>Sudah punya akun? <a href=\"login.php\">Masuk</a></p> </form> </body> </html> isset() -> fungsi untuk memeriksa status objek. $err.. -> variabel yang menampung status data error.","title":"Register"},{"location":"register/#register","text":"Register merupakan proses untuk mendaftar atau membuat akun baru ke dalam suatu layanan online. Tujuannya adalah agar kita bisa masuk dan mengakses konten utama dari layanan yang bersangkutan.","title":"Register"},{"location":"register/#function","text":"function register($data) { global $conn; $username = htmlspecialchars($data[\"username\"]); $password = htmlspecialchars($data[\"password\"]); $password2 = htmlspecialchars($data[\"password2\"]); $cek = $conn -> query(\"SELECT username FROM user WHERE username='$username' \"); if ($cek -> num_rows >= 1 ) { global $errUname; $errUname = true; return false; } if ($password !== $password2) { global $errPw; $errPw = true; return false; } $password = password_hash($password, PASSWORD_DEFAULT); $register = \"INSERT INTO user VALUE (NULL, '$username', '$password')\"; return $conn -> query($register); } register() -> fungsi yang dibuat untuk registrasi. $data -> parameter dari fungsi register() berupa data yang dikirimkan. htmlspecialchars() -> fungsi untuk mengkonversi karakter khusus menjadi entitas html. $cek -> variabel untuk menampung hasil query yang dibuat untuk cek data. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. num_rows -> objek untuk mengetahui jumlah baris dari tabel hasil query. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $err.. -> variabel yang menampung status data error. password_hash() -> fungsi untuk melakukan hashing menggunakan algoritma satu arah. PASSWORD_DEFAULT -> algoritma bawaan untuk melakukan hash. $register -> variabel untuk menampung query register. return -> nilai yang dikembalikan saat fungsi dipanggil.","title":"Function"},{"location":"register/#code-php","text":"<?php require \"functions.php\"; if (isset($_POST[\"register\"])) { if (register($_POST) === TRUE ) { header(\"Location: login.php\"); } else { echo $conn -> error; } } ?> require -> fungsi untuk memuat file php lain. isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. register() -> fungsi yang dibuat untuk registrasi. header() -> fungsi untuk redirect halaman. echo -> fungsi untuk menampilkan teks ke layar. error -> objek untuk cek error yang terjadi.","title":"Code PHP"},{"location":"register/#code-html","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Register</title> </head> <body> <h2>Register</h2><br> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <label for=\"username\">Username</label><br> <input type=\"text\" name=\"username\" id=\"username\" autocomplete=\"off\" required><br><br> <label for=\"password\">Password</label><br> <input type=\"password\" name=\"password\" id=\"password\" required><br><br> <label for=\"password2\">Confirm Pasword</label><br> <input type=\"password\" name=\"password2\" id=\"password2\" required><br><br> <button type=\"submit\" name=\"register\"> Submit </button>&emsp; <?php if(isset($errUname)) : ?> <i style=\"color: red;\">Username Sudah Terdaftar</i> <?php endif ?> <?php if(isset($errPw)) : ?> <i style=\"color: red;\">Password Tidak Sesuai</i> <?php endif ?> <p>Sudah punya akun? <a href=\"login.php\">Masuk</a></p> </form> </body> </html> isset() -> fungsi untuk memeriksa status objek. $err.. -> variabel yang menampung status data error.","title":"Code HTML"},{"location":"session/","text":"Session Session merupakan data yang disimpan dalam server yang dapat digunakan secara global di server tersebut. Contoh penggunaan session adalah ketika user melakukan login ke halaman website tertentu, maka ketika membuka halaman lain, sistem akan mengingat bahwa user tersebut telah login. Session akan otomatis berakhir pada sesi tertentu yang ditentukan oleh sistem (close browser), atau bisa juga dihapus dengan cara manual menggunakan code PHP. Code Session <?php // Membuat Session $_SESSION[\"login\"] = true; $_SESSION[\"username\"] = $username; // Memanggil Session $username = $_SESSION[\"username\"]; $dataUser = $conn -> query(\"SELECT * FROM user WHERE username='$username'\"); $user = $dataUser -> fetch_assoc(); $nama = $user[\"nama\"]; // Menghapus Session -> Logout session_start(); $_SESSION = []; session_unset(); session_destroy(); header(\"Location: login.php\"); exit; ?> $_SESSION -> variabel superglobal untuk menyimpan data ke dalam server. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif. session_start() -> fungsi untuk memulai eksekusi session pada server. session_unset() -> fungsi untuk menghapus variabel session tertentu. session_destroy() -> fungsi untuk menghapus semua data session. header() -> fungsi untuk redirect halaman. exit -> fungsi untuk menghentikan semua perintah dari script yang dibuat. Code PHP <?php // Session Halaman Index session_start(); if(!isset($_SESSION[\"login\"])) { header(\"Location: login.php\"); exit; } // Session Halaman Login session_start(); if(isset($_SESSION[\"login\"])) { header (\"Location: index.php\"); exit; } ?> session_start() -> fungsi untuk memulai eksekusi session pada server. isset() -> fungsi untuk memeriksa status objek. $_SESSION -> variabel superglobal untuk menyimpan data ke dalam server. header() -> fungsi untuk redirect halaman. exit -> fungsi untuk menghentikan semua perintah dari script yang dibuat.","title":"Session"},{"location":"session/#session","text":"Session merupakan data yang disimpan dalam server yang dapat digunakan secara global di server tersebut. Contoh penggunaan session adalah ketika user melakukan login ke halaman website tertentu, maka ketika membuka halaman lain, sistem akan mengingat bahwa user tersebut telah login. Session akan otomatis berakhir pada sesi tertentu yang ditentukan oleh sistem (close browser), atau bisa juga dihapus dengan cara manual menggunakan code PHP.","title":"Session"},{"location":"session/#code-session","text":"<?php // Membuat Session $_SESSION[\"login\"] = true; $_SESSION[\"username\"] = $username; // Memanggil Session $username = $_SESSION[\"username\"]; $dataUser = $conn -> query(\"SELECT * FROM user WHERE username='$username'\"); $user = $dataUser -> fetch_assoc(); $nama = $user[\"nama\"]; // Menghapus Session -> Logout session_start(); $_SESSION = []; session_unset(); session_destroy(); header(\"Location: login.php\"); exit; ?> $_SESSION -> variabel superglobal untuk menyimpan data ke dalam server. $conn -> variabel global yang berisi koneksi ke database. query() -> fungsi untuk membuat query. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif. session_start() -> fungsi untuk memulai eksekusi session pada server. session_unset() -> fungsi untuk menghapus variabel session tertentu. session_destroy() -> fungsi untuk menghapus semua data session. header() -> fungsi untuk redirect halaman. exit -> fungsi untuk menghentikan semua perintah dari script yang dibuat.","title":"Code Session"},{"location":"session/#code-php","text":"<?php // Session Halaman Index session_start(); if(!isset($_SESSION[\"login\"])) { header(\"Location: login.php\"); exit; } // Session Halaman Login session_start(); if(isset($_SESSION[\"login\"])) { header (\"Location: index.php\"); exit; } ?> session_start() -> fungsi untuk memulai eksekusi session pada server. isset() -> fungsi untuk memeriksa status objek. $_SESSION -> variabel superglobal untuk menyimpan data ke dalam server. header() -> fungsi untuk redirect halaman. exit -> fungsi untuk menghentikan semua perintah dari script yang dibuat.","title":"Code PHP"},{"location":"update/","text":"Mengubah Data Update merupakan proses mengubah data yang ada di database. Contoh proses ini ketika kita ingin mengubah data yang sudah kita masukkan sebelumnya pada sebuah halaman website. Saat kita melakukannya maka yang sebenarnya terjadi adalah website akan mengirimkan proses Update ke dalam database. Kemudian database meresponnya dengan mengubah data lama menjadi data baru sesuai yang kita masukkan pada halaman ubah. Function function update($data){ global $conn; $id = $data[\"id\"]; $nama = htmlspecialchars($data[\"nama\"]); $prodi = htmlspecialchars($data[\"prodi\"]); $fakultas = htmlspecialchars($data[\"fakultas\"]); $gambarLama = ($data[\"gambarLama\"]); if ($_FILES[\"gambar\"][\"error\"] === 4 ) { $gambar = $gambarLama; } else { $gambar = upload(); if (!$gambar) { return false; } } $update = \"UPDATE mahasiswa SET nama = '$nama', gambar = '$gambar', prodi = '$prodi', fakultas = '$fakultas' WHERE id=$id\"; return $conn -> query($update); } update() -> fungsi yang dibuat untuk mengubah data. $data -> parameter dari fungsi update() berupa data yang dikirimkan. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $conn -> variabel global yang berisi koneksi ke database. htmlspecialchars() -> fungsi untuk mengkonversi karakter khusus menjadi entitas html. $_FILES -> variabel superglobal untuk menampung data yang dikirimkan dalam bentuk file. upload() -> fungsi upload yang telah dibuat sebelumnya. $update -> variabel untuk menampung query update data. return -> nilai yang dikembalikan saat fungsi dipanggil. query() -> fungsi untuk membuat query. Code PHP <?php require \"functions.php\"; $id = $_GET[\"id\"]; $result = $conn -> query(\"SELECT * FROM mahasiswa WHERE id=$id\"); if (isset($_POST[\"update\"]) ) { if (update($_POST) === TRUE ) { header(\"Location: index.php\"); } else { echo $conn -> error; } } ?> require -> fungsi untuk memuat file php lain. $_GET -> variabel superglobal untuk menampung data yang dikirimkan melalui url. $result -> variabel untuk menampung hasil query yang dibuat. isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. update() -> fungsi yang dibuat untuk mengubah data. header() -> fungsi untuk redirect halaman. echo -> fungsi untuk menampilkan teks ke layar. error -> objek untuk cek error yang terjadi. Code HTML <body> <h2>Update Data</h2><br> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <?php while($row = $result -> fetch_assoc()) : ?> <input type=\"hidden\" name=\"id\" value=\"<?= $row[\"id\"] ?>\"> <input type=\"hidden\" name=\"gambarLama\" value=\"<?= $row[\"gambar\"] ?>\"> <label for=\"nama\">Nama</label><br> <input type=\"text\" name=\"nama\" id=\"nama\" autocomplete=\"off\" required value=\"<?= $row[\"nama\"] ?>\"><br><br> <label for=\"prodi\">Prodi</label><br> <input type=\"text\" name=\"prodi\" id=\"prodi\" autocomplete=\"off\" required value=\"<?= $row[\"prodi\"] ?>\"><br><br> <label for=\"fakultas\">Fakultas</label><br> <input type=\"text\" name=\"fakultas\" id=\"fakultas\" autocomplete=\"off\" required value=\"<?= $row[\"fakultas\"] ?>\"><br><br> <label for=\"gambar\">Gambar</label><br> <img src=\"img/<?= $row[\"gambar\"] ?>\" alt=\"Gambar\" width=\"60\"><br> <input type=\"file\" name=\"gambar\" id=\"gambar\"><br><br> <?php endwhile ?> <button type=\"submit\" name=\"update\"> Submit </button>&emsp; <?php if(isset($errImg)) : ?> <i>Hanya Menerima File .jpg .png .jpeg</i> <?php endif ?> <?php if(isset($errSize)) : ?> <i>Maksimal Ukuran Gambar 1MB</i> <?php endif ?> </form> </body> $row -> variabel untuk menampung hasil konversi query yang sudah berbentuk array asosiatif. $result -> variabel untuk menampung hasil query yang dibuat sebelumnya. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif. isset() -> fungsi untuk memeriksa status objek. $err.. -> variabel yang menampung status data error.","title":"Update"},{"location":"update/#mengubah-data","text":"Update merupakan proses mengubah data yang ada di database. Contoh proses ini ketika kita ingin mengubah data yang sudah kita masukkan sebelumnya pada sebuah halaman website. Saat kita melakukannya maka yang sebenarnya terjadi adalah website akan mengirimkan proses Update ke dalam database. Kemudian database meresponnya dengan mengubah data lama menjadi data baru sesuai yang kita masukkan pada halaman ubah.","title":"Mengubah Data"},{"location":"update/#function","text":"function update($data){ global $conn; $id = $data[\"id\"]; $nama = htmlspecialchars($data[\"nama\"]); $prodi = htmlspecialchars($data[\"prodi\"]); $fakultas = htmlspecialchars($data[\"fakultas\"]); $gambarLama = ($data[\"gambarLama\"]); if ($_FILES[\"gambar\"][\"error\"] === 4 ) { $gambar = $gambarLama; } else { $gambar = upload(); if (!$gambar) { return false; } } $update = \"UPDATE mahasiswa SET nama = '$nama', gambar = '$gambar', prodi = '$prodi', fakultas = '$fakultas' WHERE id=$id\"; return $conn -> query($update); } update() -> fungsi yang dibuat untuk mengubah data. $data -> parameter dari fungsi update() berupa data yang dikirimkan. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $conn -> variabel global yang berisi koneksi ke database. htmlspecialchars() -> fungsi untuk mengkonversi karakter khusus menjadi entitas html. $_FILES -> variabel superglobal untuk menampung data yang dikirimkan dalam bentuk file. upload() -> fungsi upload yang telah dibuat sebelumnya. $update -> variabel untuk menampung query update data. return -> nilai yang dikembalikan saat fungsi dipanggil. query() -> fungsi untuk membuat query.","title":"Function"},{"location":"update/#code-php","text":"<?php require \"functions.php\"; $id = $_GET[\"id\"]; $result = $conn -> query(\"SELECT * FROM mahasiswa WHERE id=$id\"); if (isset($_POST[\"update\"]) ) { if (update($_POST) === TRUE ) { header(\"Location: index.php\"); } else { echo $conn -> error; } } ?> require -> fungsi untuk memuat file php lain. $_GET -> variabel superglobal untuk menampung data yang dikirimkan melalui url. $result -> variabel untuk menampung hasil query yang dibuat. isset() -> fungsi untuk memeriksa status objek. $_POST -> variabel superglobal untuk menampung data yang dikirimkan. update() -> fungsi yang dibuat untuk mengubah data. header() -> fungsi untuk redirect halaman. echo -> fungsi untuk menampilkan teks ke layar. error -> objek untuk cek error yang terjadi.","title":"Code PHP"},{"location":"update/#code-html","text":"<body> <h2>Update Data</h2><br> <form action=\"\" method=\"POST\" enctype=\"multipart/form-data\"> <?php while($row = $result -> fetch_assoc()) : ?> <input type=\"hidden\" name=\"id\" value=\"<?= $row[\"id\"] ?>\"> <input type=\"hidden\" name=\"gambarLama\" value=\"<?= $row[\"gambar\"] ?>\"> <label for=\"nama\">Nama</label><br> <input type=\"text\" name=\"nama\" id=\"nama\" autocomplete=\"off\" required value=\"<?= $row[\"nama\"] ?>\"><br><br> <label for=\"prodi\">Prodi</label><br> <input type=\"text\" name=\"prodi\" id=\"prodi\" autocomplete=\"off\" required value=\"<?= $row[\"prodi\"] ?>\"><br><br> <label for=\"fakultas\">Fakultas</label><br> <input type=\"text\" name=\"fakultas\" id=\"fakultas\" autocomplete=\"off\" required value=\"<?= $row[\"fakultas\"] ?>\"><br><br> <label for=\"gambar\">Gambar</label><br> <img src=\"img/<?= $row[\"gambar\"] ?>\" alt=\"Gambar\" width=\"60\"><br> <input type=\"file\" name=\"gambar\" id=\"gambar\"><br><br> <?php endwhile ?> <button type=\"submit\" name=\"update\"> Submit </button>&emsp; <?php if(isset($errImg)) : ?> <i>Hanya Menerima File .jpg .png .jpeg</i> <?php endif ?> <?php if(isset($errSize)) : ?> <i>Maksimal Ukuran Gambar 1MB</i> <?php endif ?> </form> </body> $row -> variabel untuk menampung hasil konversi query yang sudah berbentuk array asosiatif. $result -> variabel untuk menampung hasil query yang dibuat sebelumnya. fetch_assoc() -> fungsi untuk mengkonversi hasil query menjadi array asosiatif. isset() -> fungsi untuk memeriksa status objek. $err.. -> variabel yang menampung status data error.","title":"Code HTML"},{"location":"upload/","text":"Upload File Upload file adalah salah satu yang terpenting didalam membuat aplikasi khususnya aplikasi berbasis web. Karena terkadang kita diharuskan membuat upload file, bisa itu fitur upload file dokumen, atau mungkin upload file gambar seperti pada social media contohnya. Untuk membuat program upload file, kita harus memahami dulu konsep-konsep pembuatan file handling, seperti membuat input bertype file yang merupakan input khusus untuk menangani sebuah file. Lalu attributte enctype pada elemen form untuk menentukan type encoding seperti apa yang akan digunakan untuk menangani file tersebut. Dan ada juga $_FILES yang merupakan variabel superglobal yang khusus untuk menangani sebuah file setelah sebelumnya sudah dibuat input dengan type file. Dan yang terakhir ada fungsi move_uploaded_file yang merupakan fungsi PHP untuk memindahkan lokasi penyimpanan file ke tempat/repository yang diinginkan. Function <?php function upload() { // $id = $_POST[\"id\"]; $namaFile = $_FILES[\"gambar\"][\"name\"]; $ukuranFile = $_FILES[\"gambar\"][\"size\"]; $tmpName = $_FILES[\"gambar\"][\"tmp_name\"]; $ekstensiGambarValid = [\"jpg\", \"png\", \"jpeg\"]; $ekstensiGambar = explode(\".\", $namaFile); $ekstensiGambar = strtoLower(end($ekstensiGambar)); if(!in_array($ekstensiGambar, $ekstensiGambarValid)) { global $errImg; $errImg = true; return false; } if($ukuranFile > 1000000) { global $errSize; $errSize = true; return false; } // $gambar = \"id\".$id.\".\".$ekstensiGambar; $gambar = uniqid().\".\".$ekstensiGambar; move_uploaded_file($tmpName, \"img/\".$gambar); return $gambar; } ?> upload() -> fungsi yang dibuat untuk megupload file. $_FILES -> variabel superglobal untuk menampung data yang dikirimkan dalam bentuk file. explode() -> fungsi untuh memisah string. (tanda pisah, string) strtoLower() -> fungsi untuk memanipulasi string menjadi huruf kecil. end() -> fungsi untuk mengambil nilai/data yang paling akhir dari sebuah variabel. in_array() -> fungsi untuk cek nilai yang ada dalam sebuah array. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $err.. -> variabel yang menampung status data error. uniqid() -> fungsi untuk menghasilkan ID unik berdasarkan microtime. move_uploaded_file() -> fungsi untuk memindahkan file yang terupload. (penyimpanan sementara, penyimpanan yang ditentukan). return -> nilai yang dikembalikan saat fungsi dipanggil.","title":"Upload"},{"location":"upload/#upload-file","text":"Upload file adalah salah satu yang terpenting didalam membuat aplikasi khususnya aplikasi berbasis web. Karena terkadang kita diharuskan membuat upload file, bisa itu fitur upload file dokumen, atau mungkin upload file gambar seperti pada social media contohnya. Untuk membuat program upload file, kita harus memahami dulu konsep-konsep pembuatan file handling, seperti membuat input bertype file yang merupakan input khusus untuk menangani sebuah file. Lalu attributte enctype pada elemen form untuk menentukan type encoding seperti apa yang akan digunakan untuk menangani file tersebut. Dan ada juga $_FILES yang merupakan variabel superglobal yang khusus untuk menangani sebuah file setelah sebelumnya sudah dibuat input dengan type file. Dan yang terakhir ada fungsi move_uploaded_file yang merupakan fungsi PHP untuk memindahkan lokasi penyimpanan file ke tempat/repository yang diinginkan.","title":"Upload File"},{"location":"upload/#function","text":"<?php function upload() { // $id = $_POST[\"id\"]; $namaFile = $_FILES[\"gambar\"][\"name\"]; $ukuranFile = $_FILES[\"gambar\"][\"size\"]; $tmpName = $_FILES[\"gambar\"][\"tmp_name\"]; $ekstensiGambarValid = [\"jpg\", \"png\", \"jpeg\"]; $ekstensiGambar = explode(\".\", $namaFile); $ekstensiGambar = strtoLower(end($ekstensiGambar)); if(!in_array($ekstensiGambar, $ekstensiGambarValid)) { global $errImg; $errImg = true; return false; } if($ukuranFile > 1000000) { global $errSize; $errSize = true; return false; } // $gambar = \"id\".$id.\".\".$ekstensiGambar; $gambar = uniqid().\".\".$ekstensiGambar; move_uploaded_file($tmpName, \"img/\".$gambar); return $gambar; } ?> upload() -> fungsi yang dibuat untuk megupload file. $_FILES -> variabel superglobal untuk menampung data yang dikirimkan dalam bentuk file. explode() -> fungsi untuh memisah string. (tanda pisah, string) strtoLower() -> fungsi untuk memanipulasi string menjadi huruf kecil. end() -> fungsi untuk mengambil nilai/data yang paling akhir dari sebuah variabel. in_array() -> fungsi untuk cek nilai yang ada dalam sebuah array. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $err.. -> variabel yang menampung status data error. uniqid() -> fungsi untuk menghasilkan ID unik berdasarkan microtime. move_uploaded_file() -> fungsi untuk memindahkan file yang terupload. (penyimpanan sementara, penyimpanan yang ditentukan). return -> nilai yang dikembalikan saat fungsi dipanggil.","title":"Function"},{"location":"validation/","text":"Validasi Form Validasi form merupakan sebuah proses yang dilakukan untuk memeriksa inputan dari pengguna. Biasanya terdapat pengkondisian terkait aksi yang akan dilakukan setelah data dimasukkan. Seperti menampilkan pesan error jika inputan salah, dan melanjutkan ke proses selanjutnya jika inputan benar. Pada umumnya terdapat dua jenis validasi form pada aplikasi web, yaitu validasi client side dan validasi server side. Pada halaman ini akan dicontohkan penggunaan validasi client side menggunakan bahasa pemrograman Javascript, dan validasi server side menggunakan bahasa pemrograman PHP. Validasi Client Side - Javascript // Form Attribute onsubmit = \"return validation()\" function validation() { const alp = /^[a-zA-Z ]+$/; const num = /^[0-9]+$/; const email = /^\\w+[\\+\\.\\w-]*@([\\w-]+\\.)*\\w+[\\w-]*\\.([a-z]{2,4}|\\d+)$/i; const tgl = new Date().toISOString().slice(0, 10); const inp = document.getElementById(\"inp\"); const errMsg = document.getElementById(\"errMsg\"); // Template if ($condition) { errMsg.innerHTML = \"Error Message\"; inp.focus(); return false; } else { errMsg.innerHTML = \"\"; } } // Validasi inputan kosong if (inp.value == \"\") // Validasi alphabet if (!inp.value.match(alp)) // Validasi number if (!inp.value.match(num)) // Validasi email if (!inp.value.match(email)) // Validasi panjang karakter if (inp.value.length < 10 || inp.value.length > 13) // Validasi tanggal if (inp.value <= tgl) return -> nilai yang dikembalikan saat fungsi dipanggil. validation() -> fungsi yang dibuat untuk melakukan validasi form. new -> syntax untuk membuat objek baru. Date() -> objek untuk membuat tanggal. toISOString() -> method untuk mengubah objek tanggal menjadi string menggunakan standar ISO. slice() -> method untuk mengembalikan elemen yang dipilih dalam array sebagai objek array baru. focus() -> method untuk memfokuskan elemen. match() -> method untuk mencari string yang cocok dengan ekspresi reguler. Validasi Server Side - PHP <?php // Validasi inputan kosong if (empty($nama)) { global $errNama; $errNama = true; return false; } // Validasi alphabet if (is_numeric($alp) == true) { global $errAlp; $errAlp = true; return false; } // Validasi number if (is_numeric($num) == false) { global $errNum; $errNum = true; return false; } // Validasi email if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { global $errEm; $errEm = true; return false; } // Validasi panjang karakter if (strlen($telp) < 10 || strlen($telp) > 13 ) { global $errTelp; $errTelp = true; return false; } // Validasi tanggal if ($tgl <= date(\"Y-m-d\")) { global $errTgl; $errTgl = true; return false; } ?> <!-- Error Message --> <?php if(isset($error)) : ?> <i style=\"color: red; font-size: .9rem\">* Error Message</i> <?php endif ?> empty() -> fungsi untuk cek apakah suatu variabel kosong. is_numeric() -> fungsi untuk cek apakah variabel berupa number. filter_var() -> fungsi untuk filter variabel dengan filter yang ditentukan. FILTER_VALIDATE_EMAIL -> filter untuk validasi alamat email. strlen() -> fungsi untuk menghitung jumlah karakter string dalam suatu variabel. date() -> fungsi untuk menampilkan data tanggal sesuai dengan format yang diinginkan. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $err.. -> variabel yang menampung status data error. return -> nilai yang dikembalikan saat fungsi dipanggil. isset() -> fungsi untuk memeriksa status objek.","title":"Validation"},{"location":"validation/#validasi-form","text":"Validasi form merupakan sebuah proses yang dilakukan untuk memeriksa inputan dari pengguna. Biasanya terdapat pengkondisian terkait aksi yang akan dilakukan setelah data dimasukkan. Seperti menampilkan pesan error jika inputan salah, dan melanjutkan ke proses selanjutnya jika inputan benar. Pada umumnya terdapat dua jenis validasi form pada aplikasi web, yaitu validasi client side dan validasi server side. Pada halaman ini akan dicontohkan penggunaan validasi client side menggunakan bahasa pemrograman Javascript, dan validasi server side menggunakan bahasa pemrograman PHP.","title":"Validasi Form"},{"location":"validation/#validasi-client-side-javascript","text":"// Form Attribute onsubmit = \"return validation()\" function validation() { const alp = /^[a-zA-Z ]+$/; const num = /^[0-9]+$/; const email = /^\\w+[\\+\\.\\w-]*@([\\w-]+\\.)*\\w+[\\w-]*\\.([a-z]{2,4}|\\d+)$/i; const tgl = new Date().toISOString().slice(0, 10); const inp = document.getElementById(\"inp\"); const errMsg = document.getElementById(\"errMsg\"); // Template if ($condition) { errMsg.innerHTML = \"Error Message\"; inp.focus(); return false; } else { errMsg.innerHTML = \"\"; } } // Validasi inputan kosong if (inp.value == \"\") // Validasi alphabet if (!inp.value.match(alp)) // Validasi number if (!inp.value.match(num)) // Validasi email if (!inp.value.match(email)) // Validasi panjang karakter if (inp.value.length < 10 || inp.value.length > 13) // Validasi tanggal if (inp.value <= tgl) return -> nilai yang dikembalikan saat fungsi dipanggil. validation() -> fungsi yang dibuat untuk melakukan validasi form. new -> syntax untuk membuat objek baru. Date() -> objek untuk membuat tanggal. toISOString() -> method untuk mengubah objek tanggal menjadi string menggunakan standar ISO. slice() -> method untuk mengembalikan elemen yang dipilih dalam array sebagai objek array baru. focus() -> method untuk memfokuskan elemen. match() -> method untuk mencari string yang cocok dengan ekspresi reguler.","title":"Validasi Client Side - Javascript"},{"location":"validation/#validasi-server-side-php","text":"<?php // Validasi inputan kosong if (empty($nama)) { global $errNama; $errNama = true; return false; } // Validasi alphabet if (is_numeric($alp) == true) { global $errAlp; $errAlp = true; return false; } // Validasi number if (is_numeric($num) == false) { global $errNum; $errNum = true; return false; } // Validasi email if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { global $errEm; $errEm = true; return false; } // Validasi panjang karakter if (strlen($telp) < 10 || strlen($telp) > 13 ) { global $errTelp; $errTelp = true; return false; } // Validasi tanggal if ($tgl <= date(\"Y-m-d\")) { global $errTgl; $errTgl = true; return false; } ?> <!-- Error Message --> <?php if(isset($error)) : ?> <i style=\"color: red; font-size: .9rem\">* Error Message</i> <?php endif ?> empty() -> fungsi untuk cek apakah suatu variabel kosong. is_numeric() -> fungsi untuk cek apakah variabel berupa number. filter_var() -> fungsi untuk filter variabel dengan filter yang ditentukan. FILTER_VALIDATE_EMAIL -> filter untuk validasi alamat email. strlen() -> fungsi untuk menghitung jumlah karakter string dalam suatu variabel. date() -> fungsi untuk menampilkan data tanggal sesuai dengan format yang diinginkan. global -> syntax untuk memanggil elemen global, elemen diluar fungsi. $err.. -> variabel yang menampung status data error. return -> nilai yang dikembalikan saat fungsi dipanggil. isset() -> fungsi untuk memeriksa status objek.","title":"Validasi Server Side - PHP"}]}